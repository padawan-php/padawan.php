#!/usr/bin/env php
<?php

use Padawan\Framework\Application\Socket as App;
use Padawan\Framework\Application\Socket\HttpOutput;
use React\Http\Response;
use React\Http\Request;
use React\Promise\Deferred;
use React\EventLoop\Factory;
use Mkusher\Co;

set_time_limit(0);
ini_set('memory_limit', '2048M');
ini_set('xdebug.max_nesting_level', '9000');
ini_set('display_errors', 'stderr');

if (function_exists("cli_set_process_title")) {
    @cli_set_process_title("padawan-server");
}

$autoloaders = [
    __DIR__ . '/../../../autoload.php',
    __DIR__ . '/../vendor/autoload.php',
    __DIR__ . '/vendor/autoload.php',
    __DIR__ . '/../autoload.php'
];

foreach ($autoloaders as $autoloader) {
    if (file_exists($autoloader)) {
        define("AUTOLOAD_PATH", $autoloader);
        break;
    }
}

require(AUTOLOAD_PATH);

runServer();

function runServer() {
    $port = 15155;
    $loop = Factory::create();
    $app = new App($loop);

    $handler = function (Request $request, Response $response) use ($app, $loop) {
        $start = microtime(1);
        printf("%s %s\n", $request->getMethod(), $request->getPath());
        if($request->getMethod() !== 'POST'){
            $response->close();
            return;
        }
        $contents = (yield loadRequestData($request));
        $requestDto = new \stdClass;
        $requestDto->command = substr($request->getPath(), 1);
        $requestDto->params = $request->getQueryParams();
        if (!empty($contents)) {
            $requestDto->params["data"] = $contents;
        }
        $output = new HttpOutput($response);
        try {
            yield $app->handle($requestDto, $output);
        } catch (\Exception $e) {
            echo $e->getMessage();
        }
        if ($response->isWritable()) {
            $response->end();
        }
        printf("Response time: %s\n", microtime(1) - $start);
    };

    $socket = new React\Socket\Server($port, $loop);
    $http = new React\Http\Server($socket);

    $http->on('request', function($request, $response) use ($handler) {
        Co\await(function() use ($request, $response, $handler) {
            return $handler($request, $response);
        })->then(null, function($error) {
            printf("Unhandled error: %s\n", $error->getMessage());
        });
    });

    // $socket->listen($port);

    echo "Started http server on 127.0.0.1:{$port}\n";

    $loop->run();
}

function loadRequestData(Request $request) {
    $headers = $request->getHeaders();
    $body = new \stdClass;
    $body->data = "";
    $body->receivedLength = 0;
    $body->dataLength = (int) @$headers['Content-Length'][0];
    $deferred = new Deferred();
    if ($body->dataLength > 0) {
        $request->on("data", function ($data) use ($body, $deferred) {
            $body->data .= $data;
            $body->receivedLength += strlen($data);
            if($body->receivedLength >= $body->dataLength){
                $deferred->resolve(urldecode($body->data));
            }
        });
    } else {
        $deferred->resolve("");
    }

    $request->on("error", function ($error) use ($deferred) {
        $deferred->reject($error);
    });

    return $deferred->promise();
}
